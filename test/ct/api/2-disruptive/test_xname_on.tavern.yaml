# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Cray Advanced Platform Monitoring and Control (CAPMC) xname_on API.
# Author: Mitch Schooler
# Service: Cray Advanced Platform Monitoring and Control

# HMS test metrics test cases: 20

# POST /xname_off Power Off Compute Node
# POST /get_xname_status Verify Off Compute Node
# POST /xname_on Off Compute Node
# POST /get_xname_status Verify On Compute Node

# POST /xname_off Power Off Multiple Compute Nodes
# POST /get_xname_status Verify Off Compute Nodes
# POST /xname_on Multiple Off Compute Nodes
# POST /get_xname_status Verify On Compute Nodes

# POST /xname_on Power On Compute Node
# POST /get_xname_status Verify On Compute Node
# POST /xname_on On Compute Node
# POST /get_xname_status Verify On Compute Node

# POST /xname_off Power Off Chassis
# POST /get_xname_status Verify Off Chassis
# POST /xname_on Off Chassis
# POST /get_xname_status Verify On Chassis

# POST /xname_off Power Off ComputeModule
# POST /get_xname_status Verify Off ComputeModule
# POST /xname_on Off ComputeModule
# POST /get_xname_status Verify On ComputeModule
---
test_name: capmcAPIxnameOnPOSToffComputeNode - Verify xname_on powers on a compute node that is powered off

stages:
  - name: capmcAPIxnameOnPOSToffComputeNodeTarget - Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: capmcAPIxnameOnPOSToffComputeNodePrep - Power the target node off to prepare it for the test case
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      # all compute node types support ForceOff (Cray, Intel, Gigabyte, HPE), can use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOnPOSToffComputeNodePrep","xnames":["{node_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSToffComputeNodeStatusCheck - Verify that the target node is powered off using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_off_poll_num_attempts}"
    delay_after: !float "{xname_off_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

  - name: capmcAPIxnameOnPOSToffComputeNodeActual - Power the target node on using xname_on
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      # not all compute node types support ForceOn (only Intel does), can't use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOnPOSToffComputeNodeActual","xnames":["{node_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSToffComputeNodeStatusCheck - Verify that the target node is powered on using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_on_poll_num_attempts}"
    delay_after: !float "{xname_on_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

---
test_name: capmcAPIxnameOnPOSTmultipleOffComputeNodes - Verify xname_on powers on multiple compute nodes that are powered off

stages:
  - name: capmcAPIxnameOnPOSTmultipleOffComputeNodesTargets - Retrieve two compute nodes from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_1_xname: Components[0].ID
          node_2_xname: Components[1].ID

  - name: capmcAPIxnameOnPOSTmultipleOffComputeNodesPrep - Power the target nodes off to prepare them for the test case
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      # all compute node types support ForceOff (Cray, Intel, Gigabyte, HPE), can use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTmultipleOffComputeNodesPrep","xnames":["{node_1_xname}","{node_2_xname}"],"force":true}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSTmultipleOffComputeNodesStatusCheck - Verify that the target nodes are powered off using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_off_poll_num_attempts}"
    delay_after: !float "{xname_off_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_1_xname}","{node_2_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_1_xname}"
                      - "{node_2_xname}"

  - name: capmcAPIxnameOnPOSTmultipleOffComputeNodesActual - Power the target nodes on using xname_on
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      # not all compute node types support ForceOn (only Intel does), can't use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTmultipleOffComputeNodesActual","xnames":["{node_1_xname}","{node_2_xname}"],"force":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSTmultipleOffComputeNodesStatusCheck - Verify that the target nodes are powered on using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_on_poll_num_attempts}"
    delay_after: !float "{xname_on_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_1_xname}","{node_2_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_1_xname}"
                      - "{node_2_xname}"

---
test_name: capmcAPIxnameOnPOSTonComputeNode - Verify xname_on keeps power on for a compute node that is already powered on

stages:
  - name: capmcAPIxnameOnPOSTonComputeNodeTarget - Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: capmcAPIxnameOnPOSTonComputeNodePrep - Power the target node on to prepare it for the test case
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      # not all compute node types support ForceOn (only Intel does), can't use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTonComputeNodePrep","xnames":["{node_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSTonComputeNodeStatusCheck - Verify that the target node is powered on using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_on_poll_num_attempts}"
    delay_after: !float "{xname_on_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

  - name: capmcAPIxnameOnPOSTonComputeNodeActual - Power the target node on using xname_on
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      # not all compute node types support ForceOn (only Intel does), can't use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTonComputeNodeActual","xnames":["{node_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSTonComputeNodeStatusCheck - Verify that the target node is powered on using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_on_poll_num_attempts}"
    delay_after: !float "{xname_on_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

---
test_name: capmcAPIxnameOnPOSToffChassis - Verify xname_on powers on a chassis that is powered off

stages:
  - name: capmcAPIxnameOnPOSToffChassisTarget - Retrieve a chassis from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Chassis"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          chassis_xname: Components[0].ID

  - name: capmcAPIxnameOnPOSToffChassisPrep - Power the target chassis off to prepare it for the test case
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSToffChassisPrep","xnames":["{chassis_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSToffChassisStatusCheck - Verify that the target chassis is powered off using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_off_poll_num_attempts}"
    delay_after: !float "{xname_off_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{chassis_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{chassis_xname}"

  - name: capmcAPIxnameOnPOSToffChassisActual - Power the target chassis on using xname_on
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSToffChassisActual","xnames":["{chassis_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSToffChassisStatusCheck - Verify that the target chassis is powered on using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_on_poll_num_attempts}"
    delay_after: !float "{xname_on_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{chassis_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{chassis_xname}"

---
test_name: capmcAPIxnameOnPOSToffComputeModule - Verify xname_on powers on a compute module that is powered off

stages:
  - name: capmcAPIxnameOnPOSToffComputeModuleTarget - Retrieve a compute module from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=ComputeModule"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          compute_module_xname: Components[0].ID

  - name: capmcAPIxnameOnPOSToffComputeModulePrep - Power the target compute module off to prepare it for the test case
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSToffComputeModulePrep","xnames":["{compute_module_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSToffComputeModuleStatusCheck - Verify that the target compute module is powered off using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_off_poll_num_attempts}"
    delay_after: !float "{xname_off_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{compute_module_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{compute_module_xname}"

  - name: capmcAPIxnameOnPOSToffComputeModuleActual - Power the target compute module on using xname_on
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSToffComputeModuleActual","xnames":["{compute_module_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOnPOSToffComputeModuleStatusCheck - Verify that the target compute module is powered on using get_xname_status
    # retry here if needed since there can be delays to the state change
    max_retries: !int "{xname_on_poll_num_attempts}"
    delay_after: !float "{xname_on_poll_interval}"
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{compute_module_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{compute_module_xname}"
