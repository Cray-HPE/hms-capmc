# MIT License
#
# (C) Copyright [2020-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

---
test_name: capmcAPIXnameONForceOnFail - test that forcing a compute node on fails
stages:
  - name: capmcAPIXnameContext - Get an xname from the HSM Components collection to use in the next stage
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          xname: Components[0].ID

  - name: capmcAPIXnameOnPOSTActual - Validate proper number of json fields
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      #TODO: this assumes that a random compute node in HSM doesn't support ForceOn, seems like a bad assumption
      json: {"reason": "ct tests", xnames: ["{xname}"], "force":true}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - -1
              "err_msg":
                required: True
                type: str
                enum:
                  - "Errors encountered with 1/1 Xnames issued ForceOn"
              "xnames":
                type: seq
                required: True
                matching: all
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "e":
                        type: int
                        required: True
                        enum:
                          - -1
                      "err_msg":
                        required: True
                        type: str
                        enum:
                          - "NodeBMC {xname}: no supported ResetType for ForceOn operation"
                      "xname":
                        required: True
                        type: str
                        enum:
                          - "{xname}"

---
test_name: capmcAPIXnameONHappyPath - test that an on works
stages:
  - name: capmcAPIXnameOFFContext - Get an xname from the HSM Components collection to use in the next stage
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          xname: Components[0].ID

  - name: capmcAPIXnameOffPOSTPrep - Validate proper number of json fields
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason": "ct tests", xnames: ["{xname}"], "force":true, "continue": true}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200

  - name: capmcAPIXnameOnPOSTActual - Validate proper number of json fields
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason": "ct tests", xnames: ["{xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
  - name: capmcAPIGetXnameOnValidation - Validate response has valid fields (Redfish)
    max_retries: 30 #retry this because there are delays to cause the state change
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source": "redfish", xnames: ["{xname}"] }
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True

# # THIS TEST IS BROKEN, WIP
#---
#test_name: capmcAPIXnameOFFSadPath - test that an off works
#stages:
#  - name: capmcAPIXnameContext - Get an xname from the HSM Components collection to use in the next stage
#    request:
#      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
#      method: GET
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#      save:
#        json:
#          xname: Components[0].ID
#
#  - name: capmcAPIXnameOffPOSTPrep - Validate proper number of json fields
#    request:
#      url: "{capmc_base_url}/capmc/v1/xname_on"
#      json: {"reason": "ct tests", xnames: ["{xname}"]}
#      method: POST
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#
#  - name: capmcAPIXnameOffPOSTActual - Validate proper number of json fields
#    request:
#      url: "{capmc_base_url}/capmc/v1/xname_off"
#      json: {"reason": "ct tests", xnames: ["{xname}"], "force":true, "continue": true }
#      method: POST
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: map
#            required: True
#            mapping:
#              "e":
#                type: int
#                required: True
#                enum:
#                  - 0
#              "err_msg":
#                required: True
#                type: str
#                enum:
#                  - ""
#  - name: capmcAPIGetXnameOffValidation - Validate response has valid fields (Redfish)
#    max_retries: 30 #retry this because there are delays to cause the state change
#    delay_after: 10
#    request:
#      url: "{capmc_base_url}/capmc/v1/get_xname_status"
#      json: {"source": "redfish", xnames: ["{xname}"] }
#      method: POST
#      verify: !bool "{verify}"
#    response:
#      status_code: 200
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: map
#            required: True
#            mapping:
#              "e":
#                type: int
#                required: True
#                enum:
#                  - 0
#              "err_msg":
#                required: True
#                type: str
#                enum:
#                  - ""
#              "off":
#                type: seq
#                matching: all
#                required: True
#                sequence:
#                  - type: str
#                    unique: True
