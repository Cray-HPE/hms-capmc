# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Cray Advanced Platform Monitoring and Control (CAPMC) xname_off API.
# Author: Mitch Schooler
# Service: Cray Advanced Platform Monitoring and Control

# HMS test metrics test cases: 16

# POST /xname_on Power On Compute Node
# POST /get_xname_status Verify On Compute Node
# POST /xname_off On Compute Node
# POST /get_xname_status Verify Off Compute Node

# POST /xname_off Power Off Compute Node
# POST /get_xname_status Verify Off Compute Node
# POST /xname_off Off Compute Node
# POST /get_xname_status Verify Off Compute Node

# POST /xname_on Power On Chassis
# POST /get_xname_status Verify On Chassis
# POST /xname_off On Chassis
# POST /get_xname_status Verify Off Chassis

# POST /xname_on Power On ComputeModule
# POST /get_xname_status Verify On ComputeModule
# POST /xname_off On ComputeModule
# POST /get_xname_status Verify Off ComputeModule
---
test_name: capmcAPIxnameOffPOSTonComputeNode - TODO

stages:
  - name: capmcAPIxnameOffPOSTonComputeNodeTarget - TODO
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSTonComputeNodePrep - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      # not all compute node types support ForceOn (only Intel does), can't use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTonComputeNodePrep","xnames":["{node_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSTonComputeNodeStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

  - name: capmcAPIxnameOffPOSTonComputeNodeActual - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      # all compute node types support ForceOff (Cray, Intel, Gigabyte, HPE), can use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTonComputeNodeActual","xnames":["{node_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSTonComputeNodeStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

---
test_name: capmcAPIxnameOffPOSToffComputeNode - TODO

stages:
  - name: capmcAPIxnameOffPOSToffComputeNodeTarget - TODO
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSToffComputeNodePrep - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      # all compute node types support ForceOff (Cray, Intel, Gigabyte, HPE), can use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOffPOSToffComputeNodePrep","xnames":["{node_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSToffComputeNodeStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

  - name: capmcAPIxnameOffPOSToffComputeNodeActual - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      # all compute node types support ForceOff (Cray, Intel, Gigabyte, HPE), can use force=true here
      json: {"reason":"CT test case: capmcAPIxnameOffPOSToffComputeNodeActual","xnames":["{node_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSToffComputeNodeStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{node_xname}"

---
test_name: capmcAPIxnameOffPOSTonChassis - TODO

stages:
  - name: capmcAPIxnameOffPOSTonChassisTarget - TODO
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Chassis"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          chassis_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSTonChassisPrep - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTonChassisPrep","xnames":["{chassis_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSTonChassisStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{chassis_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{chassis_xname}"

  - name: capmcAPIxnameOffPOSTonChassisActual - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTonChassisActual","xnames":["{chassis_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSTonChassisStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{chassis_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{chassis_xname}"

---
test_name: capmcAPIxnameOffPOSTonComputeModule - TODO

stages:
  - name: capmcAPIxnameOffPOSTonComputeModuleTarget - TODO
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=ComputeModule"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          compute_module_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSTonComputeModulePrep - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTonComputeModulePrep","xnames":["{compute_module_xname}"],"force":false,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSTonComputeModuleStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{compute_module_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{compute_module_xname}"

  - name: capmcAPIxnameOffPOSTonComputeModuleActual - TODO
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTonComputeModuleActual","xnames":["{compute_module_xname}"],"force":true,"recursive":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""

  - name: capmcAPIxnameOffPOSTonComputeModuleStatusCheck - TODO
    # retry here if needed since there can be delays to the state change
    max_retries: 30
    delay_after: 10
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source":"redfish","xnames":["{compute_module_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "off":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: str
                    unique: True
                    enum:
                      - "{compute_module_xname}"
