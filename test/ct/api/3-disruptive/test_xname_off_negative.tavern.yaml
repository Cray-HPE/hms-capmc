# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Negative Tavern test cases for the Cray Advanced Platform Monitoring and
# Control (CAPMC) xname_off API.
# Author: Mitch Schooler
# Service: Cray Advanced Platform Monitoring and Control

# HMS test metrics test cases: 3
# POST /xname_off fails with NodeBMC xname
# POST /xname_off fails with NodeEnclosure xname
# POST /xname_off fails for Node that is already locked
---
test_name: capmcAPIxnameOffPOSTnodeBMCxname

stages:
  - name: capmcAPIxnameOffPOSTnodeBMCxnamePrep - Get NodeBMC xname from HSM Components to use in upcoming stage
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          bmc_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSTnodeBMCxnameActual - Verify xname_off fails with NodeBMC xname
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTnodeBMCxnameActual","xnames":["{bmc_xname}"],"force":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - -1
              "err_msg":
                required: True
                type: str
                enum:
                  - "Errors encountered with 1 components for Off"
              "xnames":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "xname":
                        type: str
                        required: True
                        enum:
                          - "{bmc_xname}"
                      "e":
                        type: int
                        required: True
                        enum:
                          - -1
                      "err_msg":
                        type: str
                        required: True
                        enum:
                          - "Skipping {bmc_xname}: Type, 'NodeBMC', not defined in power sequence for 'Off'"

---
test_name: capmcAPIxnameOffPOSTnodeEnclosureXname

stages:
  - name: capmcAPIxnameOffPOSTnodeEnclosureXnamePrep - Get NodeEnclosure xname from HSM Components to use in upcoming stage
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeEnclosure"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          enclosure_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSTnodeEnclosureXnameActual - Verify xname_off fails with NodeEnclosure xname
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTnodeEnclosureXnameActual","xnames":["{enclosure_xname}"],"force":true}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - -1
              "err_msg":
                required: True
                type: str
                enum:
                  - "Errors encountered with 1 components for ForceOff"
              "xnames":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "xname":
                        type: str
                        required: True
                        enum:
                          - "{enclosure_xname}"
                      "e":
                        type: int
                        required: True
                        enum:
                          - -1
                      "err_msg":
                        type: str
                        required: True
                        enum:
                          - "Skipping {enclosure_xname}: Type, 'NodeEnclosure', not defined in power sequence for 'ForceOff'"

---
test_name: capmcAPIxnameOffPOSTlockedNode

stages:
  - name: capmcAPIxnameOffPOSTlockedNodeTarget - Retrieve an unlocked compute Node target from HSM to use in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&locked=False"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: capmcAPIxnameOffPOSTlockedNodeLock - Lock the target Node
    request:
      url: "{hsm_base_url}/hsm/v2/locks/lock"
      json: {"ComponentIDs":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                Counts:
                  type: map
                  required: True
                  mapping:
                    Total:
                      type: int
                      required: True
                      enum:
                        - 1
                    Success:
                      type: int
                      required: True
                      enum:
                        - 1
                    Failure:
                      type: int
                      required: True
                      enum:
                        - 0
                Success:
                  type: map
                  required: True
                  mapping:
                    ComponentIDs:
                      type: seq
                      required: True
                      sequence:
                        - type: str
                          required: True
                          enum:
                            - "{node_xname}"
                Failure:
                  type: seq
                  required: True
                  sequence:
                    - type: map
                      required: False
                      mapping:
                        ID:
                          type: str
                          required: False
                        Reason:
                          type: str
                          required: False
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.Success.ComponentIDs)"
                operator: "eq"
                expected: 1

  - name: capmcAPIxnameOffPOSTlockedNodeActual - Verify xname_off fails for Node that is already locked
    request:
      url: "{capmc_base_url}/capmc/v1/xname_off"
      json: {"reason":"CT test case: capmcAPIxnameOffPOSTlockedNodeActual","xnames":["{node_xname}"],"force":true}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 37
              "err_msg":
                required: True
                type: str
                enum:
                  - "Error: Failed to reserve components while performing a ForceOff."

  - name: capmcAPIxnameOffPOSTlockedNodeUnlock - Unlock the target Node
    request:
      url: "{hsm_base_url}/hsm/v2/locks/unlock"
      json: {"ComponentIDs":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                Counts:
                  type: map
                  required: True
                  mapping:
                    Total:
                      type: int
                      required: True
                      enum:
                        - 1
                    Success:
                      type: int
                      required: True
                      enum:
                        - 1
                    Failure:
                      type: int
                      required: True
                      enum:
                        - 0
                Success:
                  type: map
                  required: True
                  mapping:
                    ComponentIDs:
                      type: seq
                      required: True
                      sequence:
                        - type: str
                          required: True
                          enum:
                            - "{node_xname}"
                Failure:
                  type: seq
                  required: True
                  sequence:
                    - type: map
                      required: False
                      mapping:
                        ID:
                          type: str
                          required: False
                        Reason:
                          type: str
                          required: False
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.Success.ComponentIDs)"
                operator: "eq"
                expected: 1
