# MIT License
#
# (C) Copyright [2020-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Negative Tavern test cases for the Cray Advanced Platform Monitoring and
# Control (CAPMC) get_xname_status API.
# Author: Mitch Schooler, Michael Jendrysik
# Service: Cray Advanced Platform Monitoring and Control

# HMS test metrics test cases: 8
# /get_xname_status fails with NodeBMC xname
# /get_xname_status fails with invalid filter
# /get_xname_status fails with garbage filter
# /get_xname_status fails with GET method
# /get_xname_status fails with HEAD method
# /get_xname_status fails with PUT method
# /get_xname_status fails with DELETE method
# /get_xname_status fails with PATCH method
---
test_name: capmcAPIGetXnameStatus NodeBMC xname

stages:
  - name: Get NodeBMC xname from HSM Components to use in upcoming stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          bmc_xname: Components[0].ID

  - name: capmcAPIGetXnameStatus fails with NodeBMC xname
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source": "hsm", "xnames":["{bmc_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 400
              "err_msg":
                required: True
                type: str
                enum:
                  - "xnames not found: [{bmc_xname}]"
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            # response body should have "e" and "err_msg" keys
            - jmespath: "length(keys(@))"
              operator: "eq"
              expected: 2

---
test_name: capmcAPIGetXnameStatus invalid filter

stages:
  - name: capmcAPIGetXnameStatus fails with invalid filter
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_fake"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 400
      json:
        e: 400
        err_msg: "invalid filter string: show_fake"

---
test_name: capmcAPIGetXnameStatus garbage filter

stages:
  - name: capmcAPIGetXnameStatus fails with garbage filter
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "~!@#$%^&*"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 400
      json:
        e: 400
        err_msg: "invalid filter string: ~!@#$%^&*"

---
test_name: capmcAPIGetXnameStatus GET method fails

stages:
  - name: capmcAPIGetXnameStatus fails with GET method
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(GET) Not Allowed"

---
test_name: capmcAPIGetXnameStatus HEAD method fails

stages:
  - name: capmcAPIGetXnameStatus fails with HEAD method
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      method: HEAD
      verify: !bool "{verify}"
    response:
      status_code: 405

---
test_name: capmcAPIGetXnameStatus PUT method fails

stages:
  - name: capmcAPIGetXnameStatus fails with PUT method
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      method: PUT
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(PUT) Not Allowed"

---
test_name: capmcAPIGetXnameStatus DELETE method fails

stages:
  - name: capmcAPIGetXnameStatus fails with DELETE method
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(DELETE) Not Allowed"

---
test_name: capmcAPIGetXnameStatus PATCH method fails

stages:
  - name: capmcAPIGetXnameStatus fails with PATCH method
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(PATCH) Not Allowed"
