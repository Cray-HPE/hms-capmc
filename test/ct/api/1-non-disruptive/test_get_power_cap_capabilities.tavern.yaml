# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Cray Advanced Platform Monitoring and Control
# (CAPMC) get_power_cap_capabilities API.
# Author: Shane Unruh
# Service: Cray Advanced Platform Monitoring and Control

# CAPMC get_power_cap_capabilities test cases: 3
# 1. setup1 - Get HSM Nodes
# 2. test1 - POST get_power_cap_capabilities - single nid
# 3. test2 - POST get_power_cap_capabilities - two nids
# 4. test3 - POST get_power_cap_capabilities - nonexistent nid - failure test
---
test_name: capmcAPIGetPowerCapCapabilities
stages:
  - name: capmcAPIGetPowerCapabilities - setup1 - Get HSM Nodes
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          xname0: Components[0].ID
          nid0: Components[0].NID
          xname1: Components[1].ID
          nid1: Components[1].NID

  - name: capmcAPIGetPowerCapCapabilities - test1 - POST get_power_cap_capabilities - single nid
    request:
      url: "{capmc_base_url}/capmc/v1/get_power_cap_capabilities"
      json:
        nids:
          - !int "{nid0:d}"
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          # expected:
          # {
          #   "e": 0,
          #   "err_msg": "",
          #   "groups": [
          #     {
          #       "name": "3_AuthenticAMD_64c_256GiB_3200MHz_NoAccel",
          #       "desc": "3_AuthenticAMD_64c_256GiB_3200MHz_NoAccel",
          #       "host_limit_max": 925,
          #       "host_limit_min": 350,
          #       "static": 0,
          #       "supply": 925,
          #       "powerup": 0,
          #       "nids": [
          #         1000
          #       ],
          #       "controls": [
          #         {
          #           "name": "Node Power Limit",
          #           "desc": "Node Power Limit",
          #           "max": 925,
          #           "min": 350
          #         }
          #       ]
          #     }
          #   ]
          # }
          schema:
            type: map
            mapping:
              e:
                type: int
                required: True
                enum:
                  - 0
              err_msg:
                type: str
                required: True
              groups:
                type: seq
                required: True
                matching: all
                sequence:
                  -  type: map
                     mapping:
                       name:
                         type: str
                         required: True
                       desc:
                         type: str
                         required: True
                       host_limit_max:
                         type: int
                         required: True
                       host_limit_min:
                         type: int
                         required: True
                       static:
                         type: int
                         required: True
                       supply:
                         type: int
                         required: True
                       powerup:
                         type: int
                         required: True
                       nids:
                         type: seq
                         required: True
                         matching: all
                         sequence:
                           - type: int
                             required: true
                             enum:
                               - !int "{nid0:d}"
                       controls:
                         type: seq
                         required: True
                         matching: all
                         sequence:
                           - type: map
                             mapping:
                               name:
                                 type: str
                                 required: True
                               desc:
                                 type: str
                                 required: True
                               max:
                                 type: int
                                 required: True
                               min:
                                 type: int
                                 required: True

  - name: capmcAPIGetPowerCapCapabilities - test2 - POST get_power_cap_capabilities - two nids
    request:
      url: "{capmc_base_url}/capmc/v1/get_power_cap_capabilities"
      json:
        nids:
          - !int "{nid0:d}"
          - !int "{nid1:d}"
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          # expected:
          # {
          #   "e": 0,
          #   "err_msg": "",
          #   "groups": [
          #     {
          #       "name": "3_AuthenticAMD_64c_256GiB_3200MHz_NoAccel",
          #       "desc": "3_AuthenticAMD_64c_256GiB_3200MHz_NoAccel",
          #       "host_limit_max": 925,
          #       "host_limit_min": 350,
          #       "static": 0,
          #       "supply": 925,
          #       "powerup": 0,
          #       "nids": [
          #         1001,
          #         1000
          #       ],
          #       "controls": [
          #         {
          #           "name": "Node Power Limit",
          #           "desc": "Node Power Limit",
          #           "max": 925,
          #           "min": 350
          #         }
          #       ]
          #     }
          #   ]
          # }
          schema:
            type: map
            mapping:
              e:
                type: int
                required: True
                enum:
                  - 0
              err_msg:
                type: str
                required: True
              groups:
                type: seq
                required: True
                matching: all
                sequence:
                  -  type: map
                     mapping:
                       name:
                         type: str
                         required: True
                       desc:
                         type: str
                         required: True
                       host_limit_max:
                         type: int
                         required: True
                       host_limit_min:
                         type: int
                         required: True
                       static:
                         type: int
                         required: True
                       supply:
                         type: int
                         required: True
                       powerup:
                         type: int
                         required: True
                       nids:
                         type: seq
                         required: True
                         matching: all
                         sequence:
                           - type: int
                             required: true
                             enum:
                               - !int "{nid0:d}"
                               - !int "{nid1:d}"
                       controls:
                         type: seq
                         required: True
                         matching: all
                         sequence:
                           - type: map
                             mapping:
                               name:
                                 type: str
                                 required: True
                               desc:
                                 type: str
                                 required: True
                               max:
                                 type: int
                                 required: True
                               min:
                                 type: int
                                 required: True

  - name: capmcAPIGetPowerCapCapabilities - test3 - POST get_power_cap_capabilities - nonexistent nid - failure test
    request:
      url: "{capmc_base_url}/capmc/v1/get_power_cap_capabilities"
      json:
        nids:
          - 1300200100
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          # expected:
          # {
          #   "e": 22,
          #   "err_msg": "Invalid argument",
          #   "nids": [
          #     {
          #       "nid": 1300200100,
          #       "e": 22,
          #       "err_msg": "Undefined NID"
          #     }
          #   ]
          # }
          schema:
            type: map
            mapping:
              e:
                type: int
                required: True
                enum:
                  - 22
              err_msg:
                type: str
                required: True
                pattern: "Invalid argument"
              nids:
                type: seq
                required: True
                matching: all
                sequence:
                  -  type: map
                     mapping:
                       nid:
                         type: int
                         required: true
                         enum:
                           - 1300200100
                       e:
                         type: int
                         required: True
                         enum:
                           - 22
                       err_msg:
                         type: str
                         required: True
                         pattern: "Undefined NID"
