# MIT License
#
# (C) Copyright [2020-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Cray Advanced Platform Monitoring and Control
# (CAPMC) get_xname_status API.
# Author: Mitch Schooler, Michael Jendrysik
# Service: Cray Advanced Platform Monitoring and Control

# CAPMC get_xname_status test cases: 4
# 1. POST /get_xname_status empty payload API response size (Redfish)
# 2. POST /get_xname_status empty payload API response body (Redfish)
# 3. POST /get_xname_status empty payload API response size (HSM)
# 4. POST /get_xname_status empty payload API response body (HSM)
---
test_name: capmcAPIGetXnameStatus via Redfish
stages:
  # 1. POST /get_xname_status empty payload API response size (Redfish)
  # 2. POST /get_xname_status empty payload API response body (Redfish)
  - name: capmcAPIGetXnameStatusPOST - Validate proper number of json fields (Redfish)
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source": "redfish"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            # response body should have at least one node status along with "e" and "err_msg" keys
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 2
  - name: capmcAPIGetXnameStatusPOST - Validate response has valid fields (Redfish)
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source": "redfish"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "off":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "undefined":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
---
test_name: capmcAPIGetXnameStatus via Hardware State Manager
stages:
  # 3. POST /get_xname_status empty payload API response size (HSM)
  # 4. POST /get_xname_status empty payload API response body (HSM)
  - name: capmcAPIGetXnameStatusPOST - Validate proper number of json fields (HSM)
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            # response body should have at least one node status along with "e" and "err_msg" keys
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 2
  - name: capmcAPIGetXnameStatusPOST - Validate response has valid fields (HSM)
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "off":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "undefined":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "halt":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "standby":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "ready":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "disabled":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "empty":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "flags":
                type: map
                required: False
                mapping:
                  key:
                    type: seq
                    matching: all
                    required: False
                    sequence:
                      - type: str
                        unique: True

---
test_name: capmcAPIGetXnameStatus with 'show_all' filter

stages:
  # 3. POST /get_xname_status show_all filter API response code
  # 4. POST /get_xname_status show_all filter API response body
  - name: Get nodes in any state
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_all", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 0
              "err_msg":
                required: True
                type: str
                enum:
                  - ""
              "on":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "off":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "halt":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "standby":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "ready":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "disabled":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "empty":
                type: seq
                matching: all
                required: False
                sequence:
                  - type: str
                    unique: True
              "flags":
                type: map
                required: False
                mapping:
                  key:
                    type: seq
                    matching: all
                    required: False
                    sequence:
                      - type: str
                        unique: True
        # function: tavern.testutils.helpers:validate_content
        # extra_kwargs:
        #   comparisons:
        #     # response body should have at least one node status and not only "e" and "err_msg" keys
        #     - jmespath: "length(keys(@))"
        #       operator: "gt"
        #       expected: 2

---
test_name: capmcAPIGetXnameStatus with 'show_off' filter

stages:
  # 5. POST /get_xname_status show_off filter API response code
  # 6. POST /get_xname_status show_off filter API response body
  - name: Get all nodes in the 'off' state
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_off", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 4
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'on')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'halt')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'standby')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'ready')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'disabled')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with 'show_on' filter

stages:
  # 7. POST /get_xname_status show_on filter API response code
  # 8. POST /get_xname_status show_on filter API response body
  - name: Get all nodes in the 'on' state
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_on", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 4
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'off')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'halt')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'standby')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'ready')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'disabled')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with 'show_halt' filter

stages:
  # 9. POST /get_xname_status show_halt filter API response code
  # 10. POST /get_xname_status show_halt filter API response body
  - name: Get all nodes in the 'halt' state
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_halt", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 4
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'on')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'off')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'standby')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'ready')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'disabled')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with 'show_standby' filter

stages:
  # 11. POST /get_xname_status show_standby filter API response code
  # 12. POST /get_xname_status show_standby filter API response body
  - name: Get all nodes in the 'standby' state
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_standby", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 4
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'on')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'off')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'halt')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'ready')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'disabled')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with 'show_ready' filter

stages:
  # 13. POST /get_xname_status show_ready filter API response code
  # 14. POST /get_xname_status show_ready filter API response body
  - name: Get all nodes in the 'ready' state
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_ready", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 4
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'on')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'off')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'halt')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'standby')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'disabled')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with 'show_diag' filter

stages:
  # 15. POST /get_xname_status show_diag filter API response code
  # 16. POST /get_xname_status show_diag filter API response body
  - name: Get all nodes in the 'diag' state of which there should be none
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_diag", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "eq"
              expected: 2
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with 'show_disabled' filter

stages:
  # 17. POST /get_xname_status show_disabled filter API response code
  # 18. POST /get_xname_status show_disabled filter API response body
  - name: Get all nodes in the 'disabled' state of which there should be none
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_disabled", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 4
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'on')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'off')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'halt')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'standby')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'ready')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True

---
test_name: capmcAPIGetXnameStatus with multiple filters

stages:
  # 19. POST /get_xname_status show_on show_off filters API response code
  # 20. POST /get_xname_status show_on show_off filters API response body
  - name: Get all nodes in the 'on' or 'off' states
    request:
      url: "{capmc_base_url}/capmc/v1/get_xname_status"
      json: {"filter": "show_on|show_off", "source": "hsm"}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(keys(@))"
              operator: "lt"
              expected: 5
            - jmespath: "length(keys(@))"
              operator: "gt"
              expected: 1
            - jmespath: "contains(keys(@), 'halt')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'standby')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'ready')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'disabled')"
              operator: "eq"
              expected: False
            - jmespath: "contains(keys(@), 'e')"
              operator: "eq"
              expected: True
            - jmespath: "contains(keys(@), 'err_msg')"
              operator: "eq"
              expected: True
