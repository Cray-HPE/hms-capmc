# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Negative Tavern test cases for the Cray Advanced Platform Monitoring and
# Control (CAPMC) xname_on API.
# Author: Mitch Schooler
# Service: Cray Advanced Platform Monitoring and Control

# HMS test metrics test cases: 10
# POST /xname_on fails with missing xnames
# POST /xname_on fails with empty xname
# POST /xname_on fails with garbage xname
# POST /xname_on fails with NodeBMC xname
# POST /xname_on fails with NodeEnclosure xname
# GET /xname_on fails
# DELETE /xname_on fails
# PATCH /xname_on fails
# PUT /xname_on fails
# HEAD /xname_on fails
---
test_name: capmcAPIxnameOnPOSTmissingXnames

stages:
  - name: capmcAPIxnameOnPOSTmissingXnames - Verify xname_on fails with missing xnames list
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTmissingXnames","force":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 400
              "err_msg":
                required: True
                type: str
                enum:
                  - "Bad Request: Missing required xnames parameter"

---
test_name: capmcAPIxnameOnPOSTemptyXname

stages:
  - name: capmcAPIxnameOnPOSTemptyXname - Verify xname_on fails with empty xname
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTemptyXname","xnames":[""],"force":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 22
              "err_msg":
                required: True
                type: str
                enum:
                  - "invalid argument"
              "xnames":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "xname":
                        type: str
                        required: True
                        enum:
                          - ""
                      "e":
                        type: int
                        required: True
                        enum:
                          - 22
                      "err_msg":
                        type: str
                        required: True
                        enum:
                          - "invalid/duplicate xname"

---
test_name: capmcAPIxnameOnPOSTgarbageXname

stages:
  - name: capmcAPIxnameOnPOSTgarbageXname - Verify xname_on fails with garbage xname
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTgarbageXname","xnames":[".*&^%$#$%$^"],"force":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - 22
              "err_msg":
                required: True
                type: str
                enum:
                  - "invalid argument"
              "xnames":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "xname":
                        type: str
                        required: True
                        enum:
                          - ".*&^%$#$%$^"
                      "e":
                        type: int
                        required: True
                        enum:
                          - 22
                      "err_msg":
                        type: str
                        required: True
                        enum:
                          - "invalid/duplicate xname"

---
test_name: capmcAPIxnameOnPOSTnodeBMCxname

stages:
  - name: capmcAPIxnameOnPOSTnodeBMCxnamePrep - Get NodeBMC xname from HSM Components to use in upcoming stage
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          bmc_xname: Components[0].ID

  - name: capmcAPIxnameOnPOSTnodeBMCxnameActual - Verify xname_on fails with NodeBMC xname
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTnodeBMCxnameActual","xnames":["{bmc_xname}"],"force":false}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - -1
              "err_msg":
                required: True
                type: str
                enum:
                  - "Errors encountered with 1 components for On"
              "xnames":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "xname":
                        type: str
                        required: True
                        enum:
                          - "{bmc_xname}"
                      "e":
                        type: int
                        required: True
                        enum:
                          - -1
                      "err_msg":
                        type: str
                        required: True
                        enum:
                          - "Skipping {bmc_xname}: Type, 'NodeBMC', not defined in power sequence for 'On'"

---
test_name: capmcAPIxnameOnPOSTnodeEnclosureXname

stages:
  - name: capmcAPIxnameOnPOSTnodeEnclosureXnamePrep - Get NodeEnclosure xname from HSM Components to use in upcoming stage
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeEnclosure"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          enclosure_xname: Components[0].ID

  - name: capmcAPIxnameOnPOSTnodeEnclosureXnameActual - Verify xname_on fails with NodeEnclosure xname
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPOSTnodeEnclosureXnameActual","xnames":["{enclosure_xname}"],"force":true}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              "e":
                type: int
                required: True
                enum:
                  - -1
              "err_msg":
                required: True
                type: str
                enum:
                  - "Errors encountered with 1 components for ForceOn"
              "xnames":
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      "xname":
                        type: str
                        required: True
                        enum:
                          - "{enclosure_xname}"
                      "e":
                        type: int
                        required: True
                        enum:
                          - -1
                      "err_msg":
                        type: str
                        required: True
                        enum:
                          - "Skipping {enclosure_xname}: Type, 'NodeEnclosure', not defined in power sequence for 'ForceOn'"

---
test_name: capmcAPIxnameOnGET - Verify xname_on GET method fails

stages:
  - name: capmcAPIxnameOnGET - Verify xname_on fails with GET method
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(GET) Not Allowed"

---
test_name: capmcAPIxnameOnDELETE - Verify xname_on DELETE method fails

stages:
  - name: capmcAPIxnameOnDELETE - Verify xname_on fails with DELETE method
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(DELETE) Not Allowed"

---
test_name: capmcAPIxnameOnPATCH - Verify xname_on PATCH method fails

stages:
  - name: capmcAPIxnameOnPATCH - Verify xname_on fails with PATCH method
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPATCH","xnames":["FAKE"]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(PATCH) Not Allowed"

---
test_name: capmcAPIxnameOnPUT - Verify xname_on PUT method fails

stages:
  - name: capmcAPIxnameOnPUT - Verify xname_on fails with PUT method
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      json: {"reason":"CT test case: capmcAPIxnameOnPUT","xnames":["FAKE"]}
      method: PUT
      verify: !bool "{verify}"
    response:
      status_code: 405
      json:
        e: 405
        err_msg: "(PUT) Not Allowed"

---
test_name: capmcAPIxnameOnHEAD - Verify xname_on HEAD method fails

stages:
  - name: capmcAPIxnameOnHEAD - Verify xname_on fails with HEAD method
    request:
      url: "{capmc_base_url}/capmc/v1/xname_on"
      method: HEAD
      verify: !bool "{verify}"
    response:
      status_code: 405
